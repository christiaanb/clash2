include:
  - '/.ci/gitlab/common.yml'

stages:
  - build
  - test

.nightly-rules:
  rules:
    - if: $CI_PARENT_PIPELINE_SOURCE == "schedule"  # When schedueled (at night)
    - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"   # When triggered (manual triggers)
    - if: '$CI_COMMIT_TAG != null'                  # When tags are set (releases)
    - if: '$RUN_TESTS == "always"'                  # When test matrix indicates it should always run

.test-nocache:
  extends:
    - .common
    - .nightly-rules
  needs: ["build"]
  stage: test
  cache:
    paths: []
  before_script:
    - unset SNAPCRAFT_LOGIN_FILE
    - unset HACKAGE_PASSWORD
    - export GHC_ABI=$(ghc --info | grep "Project Unit Id" | tail -c 7 | cut -c 1-4)
    - export THREADS=$(./.ci/effective_cpus.sh)
    - export CABAL_JOBS=$(./.ci/effective_cpus.sh)
    - export CABAL_DIR=$HOME/.cabal
    - export clash_lib_datadir=$(pwd)/clash-lib/
    - export clash_cosim_datadir=$(pwd)/clash-cosim/
    - export
    - tar -xf dist.tar.zst -C /

    # Not all package in cache get packed into dist.tar.zst, so we need to
    # regenerate the package database
    - |
      if [ -z ${GHC_ABI} ]; then
        ghc-pkg recache --package-db=$HOME/.cabal/store/ghc-$GHC_VERSION/package.db;
      else
        ghc-pkg recache --package-db=$HOME/.cabal/store/ghc-$GHC_VERSION-$GHC_ABI/package.db;
      fi
  after_script:

.test-cache-local:
  extends:
    - .common-local
  needs: ["build"]
  stage: test
  before_script:
    - unset SNAPCRAFT_LOGIN_FILE
    - unset HACKAGE_PASSWORD
    - export GHC_ABI=$(ghc --info | grep "Project Unit Id" | tail -c 7 | cut -c 1-4)
    - export THREADS=$(./.ci/effective_cpus.sh)
    - export CABAL_JOBS=$(./.ci/effective_cpus.sh)
    - export CABAL_DIR=$HOME/.cabal
    - export clash_lib_datadir=$(pwd)/clash-lib/
    - export clash_cosim_datadir=$(pwd)/clash-cosim/
    - export
    - tar -xf cache.tar.zst -C / || true
    - tar -xf dist.tar.zst -C /
    - .ci/setup.sh

    # Not all package in cache get packed into dist.tar.zst, so we need to
    # regenerate the package database
    - |
      if [ -z ${GHC_ABI} ]; then
        ghc-pkg recache --package-db=$HOME/.cabal/store/ghc-$GHC_VERSION/package.db;
      else
        ghc-pkg recache --package-db=$HOME/.cabal/store/ghc-$GHC_VERSION-$GHC_ABI/package.db;
      fi
  after_script:
    - tar -cf - /root/.cabal/packages | zstd -T${THREADS} -3 > cache.tar.zst

# 'build' publishes its build files as an artifact. These build files are reused
# by the tests below.
build:
  extends: .common-local
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_SHA-$GHC_VERSION"
    paths:
      - dist.tar.zst
    expire_in: 1 day
  script:
    - .ci/build.sh

    # Archive all build files (from .cabal and dist-newstyle)
    - tar -cf - $(.ci/get_build_dist.sh) | zstd -T${THREADS} -15 > dist.tar.zst

# Tests run on shared runners:

# Tests run on local fast machines:

# Vivado is quite slow, so we only run a subset of the tests on development branches
# with it. The full testsuite gets run with Vivado every night on 'master'.
suite:ddr:
  extends: .test-cache-local
  script:
    - source /opt/tools/Xilinx/Vivado/2022.1/settings64.sh
    - bin/clash-testsuite:clash-testsuite -j$THREADS -p DDR --no-modelsim
  tags:
    - local
    - vivado-2022.1-standard
